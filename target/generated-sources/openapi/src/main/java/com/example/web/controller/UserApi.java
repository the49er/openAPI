/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.4.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.example.web.controller;

import com.example.web.dto.FindUserRequest;
import com.example.web.dto.UserCreateRequest;
import com.example.web.dto.UserResponse;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
@Validated
@Tag(name = "User", description = "the User API")
public interface UserApi {

    /**
     * POST /api/v1/user : create new User
     *
     * @param userCreateRequest  (optional)
     * @return Created User (status code 200)
     */
    @Operation(
        operationId = "createUser",
        summary = "create new User",
        tags = { "User" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Created User", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  UserResponse.class)))
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/user",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<UserResponse> createUser(
        @Parameter(name = "UserCreateRequest", description = "", schema = @Schema(description = "")) @Valid @RequestBody(required = false) UserCreateRequest userCreateRequest
    );


    /**
     * GET /api/v1/user : method for finding user
     *
     * @param userParams  (optional)
     * @return all users (status code 200)
     *         or Users not found (status code 404)
     */
    @Operation(
        operationId = "findUsers",
        summary = "method for finding user",
        tags = { "User" },
        responses = {
            @ApiResponse(responseCode = "200", description = "all users", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  UserResponse.class))),
            @ApiResponse(responseCode = "404", description = "Users not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/user",
        produces = { "application/json" }
    )
    ResponseEntity<List<UserResponse>> findUsers(
        @Parameter(name = "userParams", description = "", schema = @Schema(description = "")) @Valid FindUserRequest userParams
    );

}
